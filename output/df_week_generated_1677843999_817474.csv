date,subject,num_replies,authors,urls,generated_summaries,consolidated_title,consolidated_summary
2023-03-01 15:05:47,[bitcoin-dev] BIP for OP_VAULT,4,"['Greg Sanders', 'Anthony Towns', 'Greg Sanders', 'Andrew Melnychuk Oseen']","['https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021510.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021514.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021516.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021518.html']","['In this email, the sender thanks James for his interesting proposal aimed at solving a serious problem. They suggest exploring a design detour by decoupling the three functionalities of `OP_VAULT` and `OP_UNVAULT` into their constituent functions with names they made up. The goals of this email are to remove variable numbers of arguments based on values of arguments for the opcodes, remove the recursive evaluation functionality used for authentication, increase the legibility of the spec, and not greatly increase the expressiveness of the proposal. The sender suggests new covenant opcodes intended to be drop-in replacements for the existing ones. They propose two new opcodes: `OP_TRIGGER_FORWARD` and `OP_FORWARD_DESTINATION`, along with a replacement for the two opcodes. The typical usage of these opcodes is also provided in the email. Overall, the email proposes a new direction for the OP_VAULT BIP and seeks feedback on the proposed approach.', 'The context is a discussion about a proposed opcode for modifying a TLUV-ish script. The proposed opcode is called `idx . npush script OP_FORWARD_LEAF_UPDATE (OP_FLU :)`. The behavior of the proposed opcode involves popping various elements off the stack, prefixing a script with a minimal push of an entry, calculating an spk, and checking if the output at idx matches the spk. Additionally, the proposed opcode is more generic and composable than existing opcodes. The context also discusses the possibility of refunding values and proposes an additional opcode called `idx OP_FORWARD_REFUND`. In general, there is a focus on making the opcode more flexible and allowing it to accumulate value from one or more inputs into specified outputs. Finally, there is a suggestion that doing TLUV payment pools would not require much more than combining OP_FLU and OP_FDEST in a single script.', 'The conversation revolves around a proposed idea for a vault construct, with various technical details and suggestions being discussed. The proposal involves using the EXPR_TRIGGER to include a trigger, authentication, spend-delay, OP_CSV, OP_DROP and OP_FORWARD_OUTPUTS, along with the inclusion of idx and hash in the witness stack at spend time. The discussion also touches upon withdrawal authorization, setting CSV timeout to 0, batching, accounting, and refund paths. Various suggestions and changes are made throughout the conversation, with some details being clarified and others being further contemplated.', ""The writer is new to bitcoin-dev but has read a draft that has some functionality they're interested in. They want to restrict multiple tapleaves on the amount they can spend and have specific requirements for each participant's output. They outline a scenario where Bob spends their output and explain the restrictions on their next transaction. They also propose a solution for two of the three participants separately broadcasting transactions, suggesting that the second sender can combine the transactions into a package with adjusted outputs and witnesses. The writer mentions BIP's like OP_CHECKTEMPLATEVERIFY and OP_AMOUNTVERIFY and acknowledges they're not aware of previous risks discussed by the community.""]",Possible title: Discussions on Proposed Opcode and Vault Construct for Bitcoin-dev,"The first context discusses an email where the sender proposes a new direction for the OP_VAULT BIP by suggesting new covenant opcodes intended to be drop-in replacements for the existing ones. They propose two new opcodes: `OP_TRIGGER_FORWARD` and `OP_FORWARD_DESTINATION`, along with a replacement for the two opcodes.The second context is about a proposed opcode for modifying a TLUV-ish script called `idx . npush script OP_FORWARD_LEAF_UPDATE (OP_FLU :)`. The proposed opcode involves popping various elements off the stack, prefixing a script with a minimal push of an entry, calculating an spk, and checking if the output at idx matches the spk. There is also a focus on making the opcode more flexible and allowing it to accumulate value from one or more inputs into specified outputs.The third context revolves around a proposed idea for a vault construct that involves using the EXPR_TRIGGER to include a trigger, authentication, spend-delay, OP_CSV, OP_DROP and OP_FORWARD_OUTPUTS, along with the inclusion of idx and hash in the witness stack at spend time. The discussion also touches upon withdrawal authorization, setting CSV timeout to 0, batching, accounting, and refund paths.In the fourth context, the writer is new to bitcoin-dev but has read a draft that has some functionality they're interested in. They want to restrict multiple tapleaves on the amount they can spend and have specific requirements for each participant's output. They outline a scenario where Bob spends their output and explain the restrictions on their next transaction. They also propose a solution for two of the three participants separately broadcasting transactions, suggesting that the second sender can combine the transactions into a package with adjusted outputs and witnesses. The writer mentions BIP's like OP_CHECKTEMPLATEVERIFY and OP_AMOUNTVERIFY and acknowledges they're not aware of previous risks discussed by the community."
2023-02-27 13:32:01,[bitcoin-dev] BIP proposal: Fee-redistribution contracts,4,"['Rastislav Budinsky', 'HcaFc_jbe', 'shymaa arafat', 'David A. Harding']","['https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021505.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021506.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021507.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021511.html']","[""The author is working on a Bachelor's thesis proposing a new way of collecting transaction fees in Bitcoin mining. Currently, when a miner mines a block, they take all the fees for themselves. However, with the proposed solution, the miner would only take a fraction M of the fees, while the remaining fraction C would be sent to one or more contracts. These contracts would collect and redistribute the fees back to the miner in a smarter way, without introducing any new Bitcoins. The author believes that this solution would make mining more secure and predictable against fluctuations in fees. Multiple contracts could be used, each averaging the collected fees over different time frames. The author is seeking opinions on this proposal and discussing the needed parameters introduced with such a solution. They are unsure if it would be possible as a soft-fork but suggest creating a generally spendable script that follows the contracts embedded into consensus nodes themselves. Finally, the author apologizes for making this a bit less conventional BIP proposal."", 'The context discusses the issue of long term miner incentives in Bitcoin once block subsidies run out. Two approaches are presented - to intervene or not intervene. The former suggests solutions like tail-emissions, demurrage, and fee-redistribution schemes, such as the one proposed in the paper. The latter assumes that LN-settlements, ordinals, and on-chain transactions would fill block space enough to incentivize miners to keep mining. The proposed fee-redistribution scheme aims to solve issues related to undercutting attacks and fee-variance between blocks. However, it has flaws, including the possibility of miners excluding certain blocks to the detriment of their counter parties and the difficulty of convincing the ecosystem to change from competitive to cooperative mining. The paper also lacks information on how the smart-contract would be constructed and how miner consensus would be achieved.', 'The Bitcoin community is suggested to consider the idea of ""Future Saving"" through transaction fees, wherein a portion of the fees is saved (e.g. half) and decreased with each reward halving until a threshold is reached where the saved amounts are added to the low block reward. The block reward problem will not only start in 2140 but when mining cost becomes comparable to the reward value (which could be as near as 2040). A game theoretic model needs to be built with appropriate incentives and costs to get the exact numbers.', 'In an email to Rastislav Budinsky via bitcoin dev, Dave disagrees with the assumption that miners can only profit from transaction fees. He mentions that miners have accepted payments through alternative means known as ""out-of-band fees"", although they are not frequently used in Bitcoin today because they have no advantage over correctly estimated in-band fees. However, changing the consensus rules to require each miner pay a percentage of its in-band fees to future miners would incentivize them to prefer out-of-band fees that were not subject to this redistribution scheme. Dave compares this to tax evasion, where he lives people offer him discounted rates if he pays in a way that isn\'t reported to the government. In Bitcoin, there is no control over activity that happens outside of the protocol, and even a small incentive to pay fees out of band might quickly lead to almost all fees being paid out of band, preventing the effective redistribution of fees as proposed by Rastislav. Additionally, previous discussions on paying out-of-band fees have highlighted that larger miners have an advantage over smaller miners in collecting miner-specific fee payments, undermining the essential decentralization of Bitcoin\'s transaction confirmation mechanism. Dave concludes that serious consideration of Rastislav\'s proposal can only proceed if it adequately addresses the problem of out-of-band fees.']","""Proposal for Smarter Fee Redistribution in Bitcoin Mining""","The context revolves around proposed solutions for long-term miner incentives in Bitcoin mining. One approach is to intervene with solutions like tail-emissions, demurrage, and fee-redistribution schemes, such as the one proposed in the paper. The proposed solution suggests redistributing transaction fees back to miners through contracts that collect and redistribute a fraction of the fees back to the miner in a smarter way. However, the proposal has flaws, including the possibility of miners excluding certain blocks to the detriment of their counter parties and the difficulty of convincing the ecosystem to change from competitive to cooperative mining. Another suggested approach is ""Future Saving"" through transaction fees, where a portion of the fees is saved until a threshold is reached and added to the low block reward. Additionally, an email exchange between Rastislav Budinsky and Dave discusses the possibility of incentivizing miners to prefer out-of-band fees, which could prevent effective fee redistribution as proposed by Rastislav. Finally, there is a need to develop appropriate incentives and costs to address the issue of long-term miner incentives in Bitcoin mining."
2023-03-01 20:18:22,[bitcoin-dev] Minimum fees,3,"['Giuseppe B', 'Nadav Ivgi', 'jk_14 at op.pl']","['https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021512.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021513.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021520.html']","[""The author proposes a new protocol rule called min_fees that would work by appending a field to the block specifying the minimum fees required for the following block to be valid. In a scenario where block rewards are almost zero, and the base layer is mainly used as a settlement layer for relatively few large transactions, transaction fees end up being very small because there is enough space for everyone in a block. Users wouldn't mind paying higher fees as they know that would increase network security, but nobody wants to be the only one doing it. Miners, of course, would like to be paid more. The introduction of min_fees could bring the equilibrium closer to a socially optimal one and benefit the network security in the long term. However, the author acknowledges that this is just a rough sketch and would require a deeper analysis."", 'The context discusses the potential side effects of accumulating fees in the mempool and how it can lead to rational behavior for miners to fork the chain tip, resulting in increased reorgs/orphan rates and chain instability. The author also highlights the possibility of miners setting their low_fee to zero to avoid other miners from forking their blocks off. However, the author is not sure if this would actually change much as long as humanity is willing to spend a certain amount of BTC per day on mining fees, whether spread out through fewer or more blocks.', ""Bitcoin's network security is compromised as there is no equilibrium between active users and miners. The solution to benefit the network security in the long term should be simple enough for everyone to understand. There are two parties in Bitcoin with opposite interests from a network security point of view, passive stakeholders, and active users. A system in which all users participate in ensuring its long-term security is honest, while a system in which only active users participate and passive stakeholders are de facto long-term dishonest free riders is not honest. Weak long-term security budget and quantum threat are the only serious issues in Bitcoin design. In such cases, introducing a new protocol rule, min_fees, could bring the equilibrium closer to a socially optimal one and benefit the network security in the long term.""]","""Improving Bitcoin Network Security with Min_Fees Protocol Rule"".","The author proposes a new protocol rule called min_fees that would require the minimum fees for the following block to be valid. In a scenario where block rewards are almost zero, transaction fees end up being very small because there is enough space for everyone in a block. This can lead to rational behavior for miners to fork the chain tip, resulting in increased reorgs/orphan rates and chain instability. The author suggests that introducing min_fees could bring the equilibrium closer to a socially optimal one and benefit network security in the long term. However, the author acknowledges that this is just a rough sketch and would require a deeper analysis. Bitcoin's network security is compromised as there is no equilibrium between active users and miners. A system where all users participate in ensuring its long-term security is honest, while a system where only active users participate and passive stakeholders are de facto long-term dishonest free riders is not honest. Introducing min_fees could help create an equilibrium and benefit network security in the long term."
2023-02-28 18:07:06,[bitcoin-dev] Refreshed BIP324,2,"['Dhruv M', 'Erik Aronesty']","['https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021508.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-February/021509.html']","['In a discussion about short 1-byte message type IDs, changes were made and are now available in a pull request for the bitcoin improvement proposals repository on GitHub. The discussion was initiated by Anthony Towns via the bitcoin dev mailing list on February 21st, 2023 at 8:03 AM.', 'The suggestion is to follow the protocols and use 1 byte for now, but reserve the top bit to indicate that it is a two-byte ID with 128 choices. When running out of space, set the top bit again to indicate another two-byte ID, and so on. This is similar to how integers are stored in protobuf.']","""Proposed Changes to Short Message Type IDs in Bitcoin Improvement Proposals Repository on GitHub""","The bitcoin improvement proposals repository on GitHub has a pull request available following a discussion about short 1-byte message type IDs. The conversation was initiated by Anthony Towns via the bitcoin dev mailing list on February 21st, 2023 at 8:03 AM. The suggestion is to use 1 byte according to protocol but reserve the top bit to indicate a two-byte ID with 128 choices when space runs out, set the top bit again to indicate another two-byte ID, similar to how integers are stored in protobuf."
2023-03-02 06:55:19,[bitcoin-dev] Using service bit 24 for utreexo signaling in testnet and signet,3,"['kcalvinalvin', 'Luke Dashjr', 'Peter Todd']","['https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021515.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021517.html', 'https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-March/021519.html']","['Calvin, a member of the mailing list, announced that he will be using service bit 24 to indicate that nodes are Utreexo capable nodes on testnet and signet. This information was requested in the comment section of protocol.h in bitcoind. Calvin also informed the group that binaries for the Utreexo node will be released in the coming months for power users to try out, however, there are currently no plans to release binaries for mainnet. He concluded his message by asking if anyone else is using the same bit to signal for something else so that they can coordinate accordingly.', 'In a Bitcoin development discussion, a user named kcalvinalvin suggested that a certain concept should be documented as a BIP (Bitcoin Improvement Proposal) and utilize a typical service bit assignment. Another user named Luke responded to the suggestion, agreeing that it seemed like an appropriate approach. The context provides little information on what exactly this concept or idea is, but rather focuses on the suggestion of how it should be documented.', 'Experimental service bits are used for experiments, and it makes sense to use them if the details of utreexo are subject to change. Bit 24 is currently unused, while bit 26 is being used by full-rbf according to a commit on Github.']","""Bitcoin Development Discussion: Utilizing Service Bit 24 for Utreexo-Capable Nodes on Testnet and Signet""","The context includes discussion amongst members of a Bitcoin development mailing list regarding the use of service bits to indicate Utreexo capable nodes on testnet and signet. Calvin announced his intention to use bit 24 for this purpose and stated that binaries for Utreexo nodes will be released in the coming months, but not for mainnet. He also asked if anyone else was using the same bit for another purpose. In a separate discussion, kcalvinalvin suggested documenting a concept as a BIP and utilizing a service bit assignment, which Luke agreed with. The context notes that experimental service bits are used for experiments and that bit 24 is currently unused while bit 26 is being used by full-rbf."
